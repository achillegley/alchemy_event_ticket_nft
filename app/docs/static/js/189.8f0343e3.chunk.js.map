{"version":3,"file":"static/js/189.8f0343e3.chunk.js","mappings":"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","sources":["../node_modules/@ethersproject/providers/src.ts/browser-ws.ts","../node_modules/@ethersproject/providers/src.ts/websocket-provider.ts","../node_modules/alchemy-sdk/src/internal/websocket-backfiller.ts","../node_modules/alchemy-sdk/src/api/alchemy-websocket-provider.ts","../node_modules/es5-ext/global.js","../node_modules/sturdy-websocket/src/index.ts","../node_modules/websocket/lib/browser.js","../node_modules/websocket/lib/version.js"],"sourcesContent":["\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nlet WS: any = null;\n\ntry {\n    WS = (WebSocket as any);\n    if (WS == null) { throw new Error(\"inject please\"); }\n} catch (error) {\n    const logger = new Logger(version);\n    WS = function() {\n        logger.throwError(\"WebSockets not supported in this environment\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new WebSocket()\"\n        });\n    }\n}\n//export default WS;\n//module.exports = WS;\nexport { WS as WebSocket };\n","\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Event } from \"./base-provider\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1;\n\nexport type InflightRequest = {\n     callback: (error: Error, result: any) => void;\n     payload: string;\n};\n\nexport type Subscription = {\n    tag: string;\n    processFunc: (payload: any) => void;\n};\n\nexport interface WebSocketLike {\n    onopen: ((...args: Array<any>) => any) | null;\n    onmessage: ((...args: Array<any>) => any) | null;\n    onerror: ((...args: Array<any>) => any) | null;\n\n    readyState: number;\n\n    send(payload: any): void;\n    close(code?: number, reason?: string): void;\n}\n\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n    readonly _websocket: any;\n    readonly _requests: { [ name: string ]: InflightRequest };\n    readonly _detectNetwork: Promise<Network>;\n\n    // Maps event tag to subscription ID (we dedupe identical events)\n    readonly _subIds: { [ tag: string ]: Promise<string> };\n\n    // Maps Subscription ID to Subscription\n    readonly _subs: { [ name: string ]: Subscription };\n\n    _wsReady: boolean;\n\n    constructor(url: string | WebSocketLike, network?: Networkish) {\n\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n\n        if (typeof(url) === \"string\") {\n            super(url, network);\n        } else {\n            super(\"_websocket\", network);\n        }\n\n        this._pollingInterval = -1;\n\n        this._wsReady = false;\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        } else {\n            defineReadOnly(this, \"_websocket\", url);\n        }\n\n        defineReadOnly(this, \"_requests\", { });\n        defineReadOnly(this, \"_subs\", { });\n        defineReadOnly(this, \"_subIds\", { });\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n\n        // Stall sending requests until the socket is open...\n        this.websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this.websocket.send(this._requests[id].payload);\n            });\n        };\n\n        this.websocket.onmessage = (messageEvent: { data: string }) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n\n                } else {\n                    let error: Error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\n                        defineReadOnly(<any>error, \"response\", data);\n                    } else {\n                        error = new Error(\"unknown error\");\n                    }\n\n                    request.callback(error, undefined);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n\n                }\n\n            } else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result)\n                }\n\n            } else {\n                console.warn(\"this should not happen\");\n            }\n        };\n\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) { fauxPoll.unref(); }\n    }\n\n    // Cannot narrow the type of _websocket, as that is not backwards compatible\n    // so we add a getter and let the WebSocket be a public API.\n    get websocket(): WebSocketLike { return this._websocket; }\n\n    detectNetwork(): Promise<Network> {\n        return this._detectNetwork;\n    }\n\n    get pollingInterval(): number {\n        return 0;\n    }\n\n    resetEventsBlock(blockNumber: number): void {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n\n    set pollingInterval(value: number) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n\n    async poll(): Promise<void> {\n        return null;\n    }\n\n    set polling(value: boolean) {\n        if (!value) { return; }\n\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n\n    send(method: string, params?: Array<any>): Promise<any> {\n        const rid = NextId++;\n\n        return new Promise((resolve, reject) => {\n            function callback(error: Error, result: any) {\n                if (error) { return reject(error); }\n                return resolve(result);\n            }\n\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n\n            this._requests[String(rid)] = { callback, payload };\n\n            if (this._wsReady) { this.websocket.send(payload); }\n        });\n    }\n\n    static defaultUrl(): string {\n        return \"ws:/\\/localhost:8546\";\n    }\n\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\n        let subIdPromise = this._subIds[tag];\n        if (subIdPromise == null) {\n            subIdPromise = Promise.all(param).then((param) => {\n                return this.send(\"eth_subscribe\", param);\n            });\n            this._subIds[tag] = subIdPromise;\n        }\n        const subId = await subIdPromise;\n        this._subs[subId] = { tag, processFunc };\n    }\n\n    _startEvent(event: Event): void {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n\n            case \"pending\":\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n\n            case \"filter\":\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\n                    if (result.removed == null) { result.removed = false; }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n\n            case \"tx\": {\n                const emitReceipt = (event: Event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) { return; }\n                        this.emit(hash, receipt);\n                    });\n                };\n\n                // In case it is already mined\n                emitReceipt(event);\n\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n\n    _stopEvent(event: Event): void {\n        let tag = event.tag;\n\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n\n        const subId = this._subIds[tag];\n        if (!subId) { return; }\n\n       delete this._subIds[tag];\n       subId.then((subId) => {\n            if (!this._subs[subId]) { return; }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [ subId ]);\n        });\n    }\n\n    async destroy(): Promise<void> {\n        // Wait until we have connected before trying to disconnect\n        if (this.websocket.readyState === WebSocket.CONNECTING) {\n            await (new Promise((resolve) => {\n                this.websocket.onopen = function() {\n                    resolve(true);\n                };\n\n                this.websocket.onerror = function() {\n                    resolve(false);\n                };\n            }));\n        }\n\n        // Hangup\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n        this.websocket.close(1000);\n    }\n}\n","import { AlchemyWebSocketProvider } from '../api/alchemy-websocket-provider';\nimport { fromHex, toHex } from '../api/util';\n\nexport interface BatchPart {\n  method: string;\n  params?: any;\n}\n\nexport interface NewHeadsEvent {\n  author: string;\n  difficulty: string;\n  extraData: string;\n  gasLimit: string;\n  gasUsed: string;\n  hash: string;\n  logsBloom: string;\n  miner: string;\n  mixHash: string;\n  nonce: string;\n  number: string;\n  parentHash: string;\n  receiptsRoot: string;\n  sealFields: string[];\n  sha3Uncles: string;\n  size: string;\n  stateRoot: string;\n  timestamp: string;\n  transactionsRoot: string;\n}\n\n/** The return type of eth_getBlocksByHash. */\nexport interface BlockHead extends NewHeadsEvent {\n  totalDifficulty: string;\n  transactions: any[];\n  uncles: string[];\n}\n\nexport interface LogsEvent {\n  address: string;\n  blockHash: string;\n  blockNumber: string;\n  data: string;\n  logIndex: string;\n  topics: string[];\n  transactionHash: string;\n  transactionIndex: string;\n  removed?: boolean;\n}\n\nexport interface LogsSubscriptionFilter {\n  address?: string | string[];\n  topics?: Array<string | string[] | null>;\n}\n\nexport interface GetLogsOptions extends LogsSubscriptionFilter {\n  fromBlock?: string;\n  toBlock?: string;\n}\n\ninterface CommonAncestor {\n  blockNumber: number;\n  logIndex: number;\n}\n\n/**\n * The maximum number of blocks to backfill. If more than this many blocks have\n * been missed, then we'll sadly miss data, but we want to make sure we don't\n * end up requesting thousands of blocks if somebody left their laptop closed for a week.\n */\nconst MAX_BACKFILL_BLOCKS = 120;\n\n/**\n * The WebsocketBackfiller fetches events that were sent since a provided block\n * number. This is used in the {@link AlchemyWebSocketProvider} to backfill\n * events that were transmitted while the websocket connection was down.\n *\n * The backfiller backfills two main eth_subscribe events: `logs` and `newHeads`.\n *\n * @internal\n */\nexport class WebsocketBackfiller {\n  // TODO: Use HTTP provider to do backfill.\n  private maxBackfillBlocks = MAX_BACKFILL_BLOCKS;\n  constructor(private readonly provider: AlchemyWebSocketProvider) {}\n\n  /**\n   * Runs backfill for `newHeads` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param previousHeads Previous head requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   * @returns A list of `newHeads` events that were sent since the last backfill.\n   */\n  async getNewHeadsBackfill(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[],\n    fromBlockNumber: number\n  ): Promise<NewHeadsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous heads to fetch, return new heads since\n    // `fromBlockNumber`, or up to maxBackfillBlocks from the current head.\n    if (previousHeads.length === 0) {\n      return this.getHeadEventsInRange(\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted event is too far back in the past, there's no need\n    // to backfill for reorgs. Just fetch the last `maxBackfillBlocks` worth of\n    // new heads.\n    const lastSeenBlockNumber = fromHex(\n      previousHeads[previousHeads.length - 1].number\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber <= minBlockNumber) {\n      return this.getHeadEventsInRange(minBlockNumber, toBlockNumber + 1);\n    }\n\n    // To capture all `newHeads` events, return all head events from the last\n    // seen block number to current + any of the previous heads that were re-orged.\n    const reorgHeads: NewHeadsEvent[] = await this.getReorgHeads(\n      isCancelled,\n      previousHeads\n    );\n    throwIfCancelled(isCancelled);\n    const intermediateHeads: NewHeadsEvent[] = await this.getHeadEventsInRange(\n      lastSeenBlockNumber + 1,\n      toBlockNumber + 1\n    );\n    throwIfCancelled(isCancelled);\n    return [...reorgHeads, ...intermediateHeads];\n  }\n\n  /**\n   * Runs backfill for `logs` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param filter The filter object that accompanies a logs subscription.\n   * @param previousLogs Previous log requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   */\n  async getLogsBackfill(\n    isCancelled: () => boolean,\n    filter: LogsSubscriptionFilter,\n    previousLogs: LogsEvent[],\n    fromBlockNumber: number\n  ): Promise<LogsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous logs to fetch, return new logs since\n    // `fromBlockNumber`, or up to `maxBackfillBlocks` from the current head.\n    if (previousLogs.length === 0) {\n      return this.getLogsInRange(\n        filter,\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted log is too far back in the past, there's no need\n    // to backfill for removed logs. Just fetch the last `maxBackfillBlocks`\n    // worth of logs.\n    const lastSeenBlockNumber = fromHex(\n      previousLogs[previousLogs.length - 1].blockNumber\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber < minBlockNumber) {\n      return this.getLogsInRange(filter, minBlockNumber, toBlockNumber + 1);\n    }\n\n    // Return all log events that have happened along with log events that have\n    // been removed due to a chain reorg.\n    const commonAncestor = await this.getCommonAncestor(\n      isCancelled,\n      previousLogs\n    );\n    throwIfCancelled(isCancelled);\n\n    // All previous logs with a block number greater than the common ancestor\n    // were part of a re-org, so mark them as such.\n    const removedLogs = previousLogs\n      .filter(log => fromHex(log.blockNumber) > commonAncestor.blockNumber)\n      .map(log => ({ ...log, removed: true }));\n\n    // If no common ancestor was found, start backfill from the oldest log's\n    // block number.\n    const fromBlockInclusive =\n      commonAncestor.blockNumber === Number.NEGATIVE_INFINITY\n        ? fromHex(previousLogs[0].blockNumber)\n        : commonAncestor.blockNumber;\n    let addedLogs = await this.getLogsInRange(\n      filter,\n      fromBlockInclusive,\n      toBlockNumber + 1\n    );\n\n    // De-dupe any logs that were already emitted.\n    addedLogs = addedLogs.filter(\n      log =>\n        log &&\n        (fromHex(log.blockNumber) > commonAncestor.blockNumber ||\n          fromHex(log.logIndex) > commonAncestor.logIndex)\n    );\n\n    throwIfCancelled(isCancelled);\n    return [...removedLogs, ...addedLogs];\n  }\n\n  /**\n   * Sets a new max backfill blocks. VISIBLE ONLY FOR TESTING.\n   *\n   * @internal\n   */\n  setMaxBackfillBlock(newMax: number): void {\n    this.maxBackfillBlocks = newMax;\n  }\n\n  /**\n   * Gets the current block number as a number.\n   *\n   * @private\n   */\n  private async getBlockNumber(): Promise<number> {\n    const blockNumberHex: string = await this.provider.send('eth_blockNumber');\n    return fromHex(blockNumberHex);\n  }\n\n  /**\n   * Gets all `newHead` events in the provided range. Note that the returned\n   * heads do not include re-orged heads. Use {@link getReorgHeads} to find heads\n   * that were part of a re-org.\n   *\n   * @private\n   */\n  private async getHeadEventsInRange(\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<NewHeadsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const batchParts: BatchPart[] = [];\n    for (let i = fromBlockInclusive; i < toBlockExclusive; i++) {\n      batchParts.push({\n        method: 'eth_getBlockByNumber',\n        params: [toHex(i), false]\n      });\n    }\n\n    // TODO: handle errors\n    const blockHeads = await this.provider.sendBatch(batchParts);\n    return blockHeads.map(toNewHeadsEvent);\n  }\n\n  /**\n   * Returns all heads that were part of a reorg event.\n   *\n   * @private\n   */\n  private async getReorgHeads(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[]\n  ): Promise<NewHeadsEvent[]> {\n    const result: NewHeadsEvent[] = [];\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    for (let i = previousHeads.length - 1; i >= 0; i--) {\n      const oldEvent = previousHeads[i];\n      const blockHead = await this.getBlockByNumber(fromHex(oldEvent.number));\n      throwIfCancelled(isCancelled);\n\n      // If the hashes match, then current head in the iteration was not re-orged.\n      if (oldEvent.hash === blockHead.hash) {\n        break;\n      }\n\n      result.push(toNewHeadsEvent(blockHead));\n    }\n    return result.reverse();\n  }\n\n  /**\n   * Simple wrapper around `eth_getBlockByNumber` that returns the complete\n   * block information for the provided block number.\n   *\n   * @private\n   */\n  private async getBlockByNumber(blockNumber: number): Promise<BlockHead> {\n    return this.provider.send('eth_getBlockByNumber', [\n      toHex(blockNumber),\n      false\n    ]);\n  }\n\n  /**\n   * Given a list of previous log events, finds the common block number from the\n   * logs that matches the block head.\n   *\n   * This can be used to identify which logs are part of a re-org.\n   *\n   * Returns 1 less than the oldest log's block number if no common ancestor was found.\n   *\n   * @private\n   */\n  private async getCommonAncestor(\n    isCancelled: () => boolean,\n    previousLogs: LogsEvent[]\n  ): Promise<CommonAncestor> {\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    let blockHead = await this.getBlockByNumber(\n      fromHex(previousLogs[previousLogs.length - 1].blockNumber)\n    );\n    throwIfCancelled(isCancelled);\n    for (let i = previousLogs.length - 1; i >= 0; i--) {\n      const oldLog = previousLogs[i];\n\n      // Ensure that updated blocks are fetched every time the log's block number\n      // changes.\n      if (oldLog.blockNumber !== blockHead.number) {\n        blockHead = await this.getBlockByNumber(fromHex(oldLog.blockNumber));\n      }\n\n      // Since logs are ordered in ascending order, the first log that matches\n      // the hash should be the largest logIndex.\n      if (oldLog.blockHash === blockHead.hash) {\n        return {\n          blockNumber: fromHex(oldLog.blockNumber),\n          logIndex: fromHex(oldLog.logIndex)\n        };\n      }\n    }\n    return {\n      blockNumber: Number.NEGATIVE_INFINITY,\n      logIndex: Number.NEGATIVE_INFINITY\n    };\n  }\n\n  /**\n   * Gets all `logs` events in the provided range. Note that the returned logs\n   * do not include removed logs.\n   *\n   * @private\n   */ private async getLogsInRange(\n    filter: LogsSubscriptionFilter,\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<LogsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const rangeFilter: GetLogsOptions = {\n      ...filter,\n      fromBlock: toHex(fromBlockInclusive),\n      toBlock: toHex(toBlockExclusive - 1)\n    };\n    return this.provider.send('eth_getLogs', [rangeFilter]);\n  }\n}\n\nfunction toNewHeadsEvent(head: BlockHead): NewHeadsEvent {\n  const result: NewHeadsEvent & Partial<BlockHead> = { ...head };\n  delete result.totalDifficulty;\n  delete result.transactions;\n  delete result.uncles;\n  return result;\n}\n\nexport function dedupeNewHeads(events: NewHeadsEvent[]): NewHeadsEvent[] {\n  return dedupe(events, event => event.hash);\n}\n\nexport function dedupeLogs(events: LogsEvent[]): LogsEvent[] {\n  return dedupe(events, event => `${event.blockHash}/${event.logIndex}`);\n}\n\nfunction dedupe<T>(items: T[], getKey: (item: T) => any): T[] {\n  const keysSeen: Set<any> = new Set();\n  const result: T[] = [];\n  items.forEach(item => {\n    const key = getKey(item);\n    if (!keysSeen.has(key)) {\n      keysSeen.add(key);\n      result.push(item);\n    }\n  });\n  return result;\n}\n\nconst CANCELLED = new Error('Cancelled');\nexport function throwIfCancelled(isCancelled: () => boolean): void {\n  if (isCancelled()) {\n    throw CANCELLED;\n  }\n}\n","import SturdyWebSocket from 'sturdy-websocket';\n\nimport { Listener } from '@ethersproject/abstract-provider';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport {\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { Network as NetworkFromEthers } from '@ethersproject/networks/lib/types';\nimport {\n  CommunityResourcable,\n  WebSocketProvider\n} from '@ethersproject/providers';\n\nimport {\n  EthersEvent,\n  getAlchemyEventTag,\n  isAlchemyEvent,\n  verifyAlchemyEventName\n} from '../internal/ethers-event';\nimport {\n  ALCHEMY_EVENT_TYPES,\n  ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE,\n  ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  SingleOrBatchResponse,\n  SubscriptionEvent,\n  WebSocketMessage\n} from '../internal/internal-types';\nimport {\n  BatchPart,\n  LogsEvent,\n  LogsSubscriptionFilter,\n  NewHeadsEvent,\n  WebsocketBackfiller,\n  dedupeLogs,\n  dedupeNewHeads,\n  throwIfCancelled\n} from '../internal/websocket-backfiller';\nimport { AlchemyEventType, AlchemySubscription } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  EthersNetwork,\n  noop\n} from '../util/const';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\nimport { AlchemyProvider } from './alchemy-provider';\nimport { fromHex } from './util';\n\nconst HEARTBEAT_INTERVAL = 30000;\nconst HEARTBEAT_WAIT_TIME = 10000;\nconst BACKFILL_TIMEOUT = 60000;\nconst BACKFILL_RETRIES = 5;\n/**\n * Subscriptions have a memory of recent events they have sent so that in the\n * event that they disconnect and need to backfill, they can detect re-orgs.\n * Keep a buffer that goes back at least these many blocks, the maximum amount\n * at which we might conceivably see a re-org.\n *\n * Note that while our buffer goes back this many blocks, it may contain more\n * than this many elements, since in the case of logs subscriptions more than\n * one event may be emitted for a block.\n */\nconst RETAINED_EVENT_BLOCK_COUNT = 10;\n\n/**\n * SDK's custom implementation fo the ethers.js's 'AlchemyWebSocketProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getWebSocketProvider()}.\n *\n * @public\n */\nexport class AlchemyWebSocketProvider\n  extends WebSocketProvider\n  implements CommunityResourcable\n{\n  _events: Array<EthersEvent> = [];\n  readonly apiKey: string;\n\n  // In the case of a WebSocket reconnection, all subscriptions are lost and we\n  // create new ones to replace them, but we want to create the illusion that\n  // the original subscriptions persist. Thus, maintain a mapping from the\n  // \"virtual\" subscription ids which are visible to the consumer to the\n  // \"physical\" subscription ids of the actual connections. This terminology is\n  // borrowed from virtual and physical memory, which has a similar mapping.\n  /** @internal */\n  private readonly virtualSubscriptionsById: Map<string, VirtualSubscription> =\n    new Map();\n  /** @internal */\n  private readonly virtualIdsByPhysicalId: Map<string, string> = new Map();\n  /** @internal */\n  private readonly backfiller: WebsocketBackfiller;\n  /** @internal */\n  private heartbeatIntervalId?: NodeJS.Timeout;\n  /** @internal */\n  private cancelBackfill: () => void;\n\n  /** @internal */\n  constructor(config: AlchemyConfig, wsConstructor?: any) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'wss'\n    );\n\n    const protocol = `alchemy-sdk-${VERSION}`;\n\n    // Use the provided config URL override if it exists, otherwise use the created one.\n    const ws = new SturdyWebSocket(config.url ?? connection.url, protocol, {\n      wsConstructor: wsConstructor ?? getWebsocketConstructor()\n    });\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(ws as any, ethersNetwork);\n    this.apiKey = apiKey;\n\n    // Start heartbeat and backfiller for the websocket connection.\n    this.backfiller = new WebsocketBackfiller(this);\n    this.addSocketListeners();\n    this.startHeartbeat();\n    this.cancelBackfill = noop;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based subscriptions.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  on(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based\n   * subscriptions. Adds a listener to the triggered for only the next\n   * {@link eventName} event, after which it will be removed.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  once(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  /**\n   * Removes the provided {@link listener} for the {@link eventName} event. If no\n   * listener is provided, all listeners for the event will be removed.\n   *\n   * @param eventName Event to unlisten to.\n   * @param listener The listener function to remove.\n   * @override\n   * @public\n   */\n  off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (isAlchemyEvent(eventName)) {\n      return this._off(eventName, listener);\n    } else {\n      return super.off(eventName, listener);\n    }\n  }\n\n  /**\n   * Remove all listeners for the provided {@link eventName} event. If no event\n   * is provided, all events and their listeners are removed.\n   *\n   * @param eventName The event to remove all listeners for.\n   * @override\n   * @public\n   */\n  removeAllListeners(eventName?: AlchemyEventType): this {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._removeAllListeners(eventName);\n    } else {\n      return super.removeAllListeners(eventName);\n    }\n  }\n\n  /**\n   * Returns the number of listeners for the provided {@link eventName} event. If\n   * no event is provided, the total number of listeners for all events is returned.\n   *\n   * @param eventName The event to get the number of listeners for.\n   * @public\n   * @override\n   */\n  listenerCount(eventName?: AlchemyEventType): number {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listenerCount(eventName);\n    } else {\n      return super.listenerCount(eventName);\n    }\n  }\n\n  /**\n   * Returns an array of listeners for the provided {@link eventName} event. If\n   * no event is provided, all listeners will be included.\n   *\n   * @param eventName The event to get the listeners for.\n   * @public\n   * @override\n   */\n  listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listeners(eventName);\n    } else {\n      return super.listeners(eventName);\n    }\n  }\n\n  /**\n   * Overrides the method in `BaseProvider` in order to properly format the\n   * Alchemy subscription events.\n   *\n   * @internal\n   * @override\n   */\n  _addEventListener(\n    eventName: AlchemyEventType,\n    listener: Listener,\n    once: boolean\n  ): this {\n    if (isAlchemyEvent(eventName)) {\n      verifyAlchemyEventName(eventName);\n      const event = new EthersEvent(\n        getAlchemyEventTag(eventName),\n        listener,\n        once\n      );\n      this._events.push(event);\n      this._startEvent(event);\n      return this;\n    } else {\n      return super._addEventListener(eventName, listener, once);\n    }\n  }\n\n  /**\n   * Overrides the `_startEvent()` method in ethers.js's\n   * {@link WebSocketProvider} to include additional alchemy methods.\n   *\n   * @param event\n   * @override\n   * @internal\n   */\n  _startEvent(event: EthersEvent): void {\n    // Check if the event type is a custom Alchemy subscription.\n    const customLogicTypes = [...ALCHEMY_EVENT_TYPES, 'block', 'filter'];\n    if (customLogicTypes.includes(event.type)) {\n      this.customStartEvent(event);\n    } else {\n      super._startEvent(event);\n    }\n  }\n\n  /**\n   * Overridden from ethers.js's {@link WebSocketProvider}\n   *\n   * Modified in order to add mappings for backfilling.\n   *\n   * @internal\n   * @override\n   */\n  async _subscribe(\n    tag: string,\n    param: Array<any>,\n    processFunc: (result: any) => void,\n    event?: EthersEvent\n  ): Promise<void> {\n    let subIdPromise = this._subIds[tag];\n\n    // BEGIN MODIFIED CODE\n    const startingBlockNumber = await this.getBlockNumber();\n    // END MODIFIED CODE\n\n    if (subIdPromise == null) {\n      subIdPromise = Promise.all(param).then(param => {\n        return this.send('eth_subscribe', param);\n      });\n      this._subIds[tag] = subIdPromise;\n    }\n    const subId = await subIdPromise;\n\n    // BEGIN MODIFIED CODE\n    const resolvedParams = await Promise.all(param);\n    this.virtualSubscriptionsById.set(subId, {\n      event: event!,\n      method: 'eth_subscribe',\n      params: resolvedParams,\n      startingBlockNumber,\n      virtualId: subId,\n      physicalId: subId,\n      sentEvents: [],\n      isBackfilling: false,\n      backfillBuffer: []\n    });\n    this.virtualIdsByPhysicalId.set(subId, subId);\n\n    // END MODIFIED CODE\n\n    this._subs[subId] = { tag, processFunc };\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @internal\n   * @override\n   */\n  emit(eventName: AlchemyEventType, ...args: Array<any>): boolean {\n    if (isAlchemyEvent(eventName)) {\n      let result = false;\n\n      const stopped: Array<EthersEvent> = [];\n\n      // This line is the only modified line from the original method.\n      const eventTag = getAlchemyEventTag(eventName);\n\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        setTimeout(() => {\n          event.listener.apply(this, args);\n        }, 0);\n\n        result = true;\n\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n\n        return true;\n      });\n\n      stopped.forEach(event => {\n        this._stopEvent(event);\n      });\n\n      return result;\n    } else {\n      return super.emit(eventName, ...args);\n    }\n  }\n\n  /** @internal */\n  async sendBatch(parts: BatchPart[]): Promise<any[]> {\n    let nextId = 0;\n    const payload: JsonRpcRequest[] = parts.map(({ method, params }) => {\n      return {\n        method,\n        params,\n        jsonrpc: '2.0',\n        id: `alchemy-sdk:${nextId++}`\n      };\n    });\n\n    return this.sendBatchConcurrently(payload);\n  }\n\n  /** @override */\n  destroy(): Promise<void> {\n    this.removeSocketListeners();\n    this.stopHeartbeatAndBackfill();\n    return super.destroy();\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `WebSocketProvider._stopEvent()`.\n   *\n   * This method is copied over directly in order to support Alchemy's\n   * subscription type by allowing the provider to properly stop Alchemy's\n   * subscription events.\n   *\n   * @internal\n   */\n  _stopEvent(event: EthersEvent): void {\n    let tag = event.tag;\n\n    // START MODIFIED CODE\n    if (ALCHEMY_EVENT_TYPES.includes(event.type)) {\n      // There are remaining pending transaction listeners.\n      if (\n        this._events.filter(e => ALCHEMY_EVENT_TYPES.includes(e.type)).length\n      ) {\n        return;\n      }\n      // END MODIFIED CODE\n    } else if (event.type === 'tx') {\n      // There are remaining transaction event listeners\n      if (this._events.filter(e => e.type === 'tx').length) {\n        return;\n      }\n      tag = 'tx';\n    } else if (this.listenerCount(event.event)) {\n      // There are remaining event listeners\n      return;\n    }\n\n    const subId = this._subIds[tag];\n    if (!subId) {\n      return;\n    }\n\n    delete this._subIds[tag];\n    void subId.then(subId => {\n      if (!this._subs[subId]) {\n        return;\n      }\n      delete this._subs[subId];\n      void this.send('eth_unsubscribe', [subId]);\n    });\n  }\n\n  /** @internal */\n  private addSocketListeners(): void {\n    this._websocket.addEventListener('message', this.handleMessage);\n    this._websocket.addEventListener('reopen', this.handleReopen);\n    this._websocket.addEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /** @internal */\n  private removeSocketListeners(): void {\n    this._websocket.removeEventListener('message', this.handleMessage);\n    this._websocket.removeEventListener('reopen', this.handleReopen);\n    this._websocket.removeEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /**\n   * The underlying ethers {@link WebSocketProvider} already handles and emits\n   * messages. To allow backfilling, track all messages that are emitted.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleMessage = (event: MessageEvent): void => {\n    const message: WebSocketMessage = JSON.parse(event.data);\n    if (!isSubscriptionEvent(message)) {\n      return;\n    }\n    const physicalId = message.params.subscription;\n    const virtualId = this.virtualIdsByPhysicalId.get(physicalId);\n    if (!virtualId) {\n      return;\n    }\n    const subscription = this.virtualSubscriptionsById.get(virtualId)!;\n    if (subscription.method !== 'eth_subscribe') {\n      return;\n    }\n\n    switch (subscription.params[0]) {\n      case 'newHeads': {\n        const newHeadsSubscription = subscription as NewHeadsSubscription;\n        const newHeadsMessage = message as SubscriptionEvent<NewHeadsEvent>;\n        const { isBackfilling, backfillBuffer } = newHeadsSubscription;\n        const { result } = newHeadsMessage.params;\n        if (isBackfilling) {\n          addToNewHeadsEventsBuffer(backfillBuffer, result);\n        } else if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        } else {\n          // Ethers subscription mapping will emit the event, just store it.\n          this.rememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        }\n        break;\n      }\n      case 'logs': {\n        const logsSubscription = subscription as LogsSubscription;\n        const logsMessage = message as SubscriptionEvent<LogsEvent>;\n        const { isBackfilling, backfillBuffer } = logsSubscription;\n        const { result } = logsMessage.params;\n        if (isBackfilling) {\n          addToLogsEventsBuffer(backfillBuffer, result);\n        } else if (virtualId !== physicalId) {\n          this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n        } else {\n          this.rememberEvent(virtualId, result, getLogsBlockNumber);\n        }\n        break;\n      }\n      default:\n        if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          const { result } = (message as SubscriptionEvent<unknown>).params;\n          this.emitEvent(virtualId, result);\n        }\n    }\n  };\n\n  /**\n   * When the websocket connection reopens:\n   *\n   * 1. Resubscribe to all existing subscriptions and start backfilling\n   * 2. Restart heart beat.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleReopen = () => {\n    this.virtualIdsByPhysicalId.clear();\n    const { cancel, isCancelled } = makeCancelToken();\n    this.cancelBackfill = cancel;\n    for (const subscription of this.virtualSubscriptionsById.values()) {\n      void (async () => {\n        try {\n          await this.resubscribeAndBackfill(isCancelled, subscription);\n        } catch (error) {\n          if (!isCancelled()) {\n            console.error(\n              `Error while backfilling \"${subscription.params[0]}\" subscription. Some events may be missing.`,\n              error\n            );\n          }\n        }\n      })();\n    }\n    this.startHeartbeat();\n  };\n\n  /**\n   * Reopens the backfill based on\n   *\n   * @param isCancelled\n   * @param subscription\n   * @internal\n   */\n  private async resubscribeAndBackfill(\n    isCancelled: () => boolean,\n    subscription: VirtualSubscription\n  ): Promise<void> {\n    const {\n      virtualId,\n      method,\n      params,\n      sentEvents,\n      backfillBuffer,\n      startingBlockNumber\n    } = subscription;\n    subscription.isBackfilling = true;\n    backfillBuffer.length = 0;\n    try {\n      const physicalId = await this.send(method, params);\n      throwIfCancelled(isCancelled);\n      subscription.physicalId = physicalId;\n      this.virtualIdsByPhysicalId.set(physicalId, virtualId);\n      switch (params[0]) {\n        case 'newHeads': {\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getNewHeadsBackfill(\n                  isCancelled,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeNewHeads([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitNewHeadsEvent(virtualId, event));\n          break;\n        }\n        case 'logs': {\n          const filter: LogsSubscriptionFilter = params[1] || {};\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getLogsBackfill(\n                  isCancelled,\n                  filter,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeLogs([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitLogsEvent(virtualId, event));\n          break;\n        }\n        default:\n          break;\n      }\n    } finally {\n      subscription.isBackfilling = false;\n      backfillBuffer.length = 0;\n    }\n  }\n\n  /**\n   * Cancels the heartbeat and any pending backfills being performed. This is\n   * called when the websocket connection goes down or is disconnected.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private stopHeartbeatAndBackfill = () => {\n    if (this.heartbeatIntervalId != null) {\n      clearInterval(this.heartbeatIntervalId);\n      this.heartbeatIntervalId = undefined;\n    }\n    this.cancelBackfill();\n  };\n\n  /** @internal */\n  private emitNewHeadsEvent(virtualId: string, result: NewHeadsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n  }\n\n  /** @internal */\n  private emitLogsEvent(virtualId: string, result: LogsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n  }\n\n  /**\n   * Emits an event to consumers, but also remembers it in its subscriptions's\n   * `sentEvents` buffer so that we can detect re-orgs if the connection drops\n   * and needs to be reconnected.\n   *\n   * @internal\n   */\n  private emitAndRememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    this.rememberEvent(virtualId, result, getBlockNumber);\n    this.emitEvent(virtualId, result);\n  }\n\n  private emitEvent<T>(virtualId: string, result: T): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    this.emitGenericEvent(subscription, result);\n  }\n\n  /** @internal */\n  private rememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    // Web3 modifies these event objects once we pass them on (changing hex\n    // numbers to numbers). We want the original event, so make a defensive\n    // copy.\n    addToPastEventsBuffer(\n      subscription.sentEvents,\n      { ...result },\n      getBlockNumber\n    );\n  }\n\n  /** @internal */\n  private emitGenericEvent(\n    subscription: VirtualSubscription,\n    result: any\n  ): void {\n    const emitFunction = this.emitProcessFn(subscription.event);\n    emitFunction(result);\n  }\n\n  /**\n   * Starts a heartbeat that pings the websocket server periodically to ensure\n   * that the connection stays open.\n   *\n   * @internal\n   */\n  private startHeartbeat(): void {\n    if (this.heartbeatIntervalId != null) {\n      return;\n    }\n    this.heartbeatIntervalId = setInterval(async () => {\n      try {\n        await withTimeout(this.send('net_version'), HEARTBEAT_WAIT_TIME);\n      } catch {\n        this._websocket.reconnect();\n      }\n    }, HEARTBEAT_INTERVAL);\n  }\n\n  /**\n   * This method sends the batch concurrently as individual requests rather than\n   * as a batch, which was the original implementation. The original batch logic\n   * is preserved in this implementation in order for faster porting.\n   *\n   * @param payload\n   * @internal\n   */\n  // TODO(cleanup): Refactor and remove usages of `sendBatch()`.\n  // TODO(errors): Use allSettled() once we have more error handling.\n  private async sendBatchConcurrently(\n    payload: JsonRpcRequest[]\n  ): Promise<unknown[]> {\n    return Promise.all(payload.map(req => this.send(req.method, req.params)));\n  }\n\n  /** @internal */\n  private customStartEvent(event: EthersEvent): void {\n    if (event.type === ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      const { fromAddress, toAddress, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.PENDING_TRANSACTIONS,\n          { fromAddress, toAddress, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n      const { addresses, includeRemoved, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.MINED_TRANSACTIONS,\n          { addresses, includeRemoved, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'block') {\n      void this._subscribe(\n        'block',\n        ['newHeads'],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'filter') {\n      void this._subscribe(\n        event.tag,\n        ['logs', this._getFilter(event.filter)],\n        this.emitProcessFn(event),\n        event\n      );\n    }\n  }\n\n  /** @internal */\n  private emitProcessFn(event: EthersEvent): (result: any) => void {\n    switch (event.type) {\n      case ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.PENDING_TRANSACTIONS,\n              fromAddress: event.fromAddress,\n              toAddress: event.toAddress,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.MINED_TRANSACTIONS,\n              addresses: event.addresses,\n              includeRemoved: event.includeRemoved,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case 'block':\n        return result => {\n          const blockNumber = BigNumber.from(result.number).toNumber();\n          this._emitted.block = blockNumber;\n          this.emit('block', blockNumber);\n        };\n      case 'filter':\n        return result => {\n          if (result.removed == null) {\n            result.removed = false;\n          }\n          this.emit(event.filter, this.formatter.filterLog(result));\n        };\n      default:\n        throw new Error('Invalid event type to `emitProcessFn()`');\n    }\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.off()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped: Array<EthersEvent> = [];\n\n    let found = false;\n    const eventTag = getAlchemyEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n      if (found) {\n        return true;\n      }\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.removeAllListeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _removeAllListeners(eventName: AlchemyEventType): this {\n    let stopped: Array<EthersEvent> = [];\n    if (eventName == null) {\n      stopped = this._events;\n\n      this._events = [];\n    } else {\n      const eventTag = getAlchemyEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listenerCount()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listenerCount(eventName?: AlchemyEventType): number {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events\n      .filter(event => event.tag === eventTag)\n      .map(event => event.listener);\n  }\n}\n\nfunction getWebsocketConstructor(): any {\n  return isNodeEnvironment() ? require('websocket').w3cwebsocket : WebSocket;\n}\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== 'undefined' &&\n    process != null &&\n    process.versions != null &&\n    process.versions.node != null\n  );\n}\n\n/** @internal */\ninterface CancelToken {\n  cancel(): void;\n  isCancelled(): boolean;\n}\n\ninterface VirtualSubscription {\n  event: EthersEvent;\n  virtualId: string;\n  physicalId: string;\n  method: string;\n  params: any[];\n  isBackfilling: boolean;\n  startingBlockNumber: number;\n  sentEvents: any[];\n  backfillBuffer: any[];\n}\n\ninterface NewHeadsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['newHeads'];\n  isBackfilling: boolean;\n  sentEvents: NewHeadsEvent[];\n  backfillBuffer: NewHeadsEvent[];\n}\n\ninterface LogsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['logs', LogsSubscriptionFilter?];\n  isBackfilling: boolean;\n  sentEvents: LogsEvent[];\n  backfillBuffer: LogsEvent[];\n}\n\n// TODO(cleanup): Use class variable rather than passing `isCancelled` everywhere.\nfunction makeCancelToken(): CancelToken {\n  let cancelled = false;\n  return { cancel: () => (cancelled = true), isCancelled: () => cancelled };\n}\n\n// TODO(cleanup): replace with SDK's backoff implementation\nconst MIN_RETRY_DELAY = 1000;\nconst RETRY_BACKOFF_FACTOR = 2;\nconst MAX_RETRY_DELAY = 30000;\n\nasync function withBackoffRetries<T>(\n  f: () => Promise<T>,\n  retryCount: number,\n  shouldRetry: (error: unknown) => boolean = () => true\n): Promise<T> {\n  let nextWaitTime = 0;\n  let i = 0;\n  while (true) {\n    try {\n      return await f();\n    } catch (error) {\n      i++;\n      if (i >= retryCount || !shouldRetry(error)) {\n        throw error;\n      }\n      await delay(nextWaitTime);\n      if (!shouldRetry(error)) {\n        throw error;\n      }\n      nextWaitTime =\n        nextWaitTime === 0\n          ? MIN_RETRY_DELAY\n          : Math.min(MAX_RETRY_DELAY, RETRY_BACKOFF_FACTOR * nextWaitTime);\n    }\n  }\n}\n\nfunction delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction withTimeout<T>(promise: Promise<T>, ms: number): Promise<T> {\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) =>\n      setTimeout(() => reject(new Error('Timeout')), ms)\n    )\n  ]);\n}\n\nfunction getNewHeadsBlockNumber(event: NewHeadsEvent): number {\n  return fromHex(event.number);\n}\n\nfunction getLogsBlockNumber(event: LogsEvent): number {\n  return fromHex(event.blockNumber);\n}\n\nfunction isResponse(\n  message: WebSocketMessage\n): message is SingleOrBatchResponse {\n  return (\n    Array.isArray(message) ||\n    (message.jsonrpc === '2.0' && (message as JsonRpcResponse).id !== undefined)\n  );\n}\n\nfunction isSubscriptionEvent(\n  message: WebSocketMessage\n): message is SubscriptionEvent {\n  return !isResponse(message);\n}\n\nfunction addToNewHeadsEventsBuffer(\n  pastEvents: NewHeadsEvent[],\n  event: NewHeadsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getNewHeadsBlockNumber);\n}\n\nfunction addToLogsEventsBuffer(\n  pastEvents: LogsEvent[],\n  event: LogsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getLogsBlockNumber);\n}\n\n/**\n * Adds a new event to an array of events, evicting any events which are so old\n * that they will no longer feasibly be part of a reorg.\n */\nfunction addToPastEventsBuffer<T>(\n  pastEvents: T[],\n  event: T,\n  getBlockNumber: (event: T) => number\n): void {\n  const currentBlockNumber = getBlockNumber(event);\n  // Find first index of an event recent enough to retain, then drop everything\n  // at a lower index.\n  const firstGoodIndex = pastEvents.findIndex(\n    e => getBlockNumber(e) > currentBlockNumber - RETAINED_EVENT_BLOCK_COUNT\n  );\n  if (firstGoodIndex === -1) {\n    pastEvents.length = 0;\n  } else {\n    pastEvents.splice(0, firstGoodIndex);\n  }\n  pastEvents.push(event);\n}\n","var naiveFallback = function () {\n\tif (typeof self === \"object\" && self) return self;\n\tif (typeof window === \"object\" && window) return window;\n\tthrow new Error(\"Unable to resolve global `this`\");\n};\n\nmodule.exports = (function () {\n\tif (this) return this;\n\n\t// Unexpected strict mode (may happen if e.g. bundled into ESM module)\n\n\t// Fallback to standard globalThis if available\n\tif (typeof globalThis === \"object\" && globalThis) return globalThis;\n\n\t// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis\n\t// In all ES5+ engines global object inherits from Object.prototype\n\t// (if you approached one that doesn't please report)\n\ttry {\n\t\tObject.defineProperty(Object.prototype, \"__global__\", {\n\t\t\tget: function () { return this; },\n\t\t\tconfigurable: true\n\t\t});\n\t} catch (error) {\n\t\t// Unfortunate case of updates to Object.prototype being restricted\n\t\t// via preventExtensions, seal or freeze\n\t\treturn naiveFallback();\n\t}\n\ttry {\n\t\t// Safari case (window.__global__ works, but __global__ does not)\n\t\tif (!__global__) return naiveFallback();\n\t\treturn __global__;\n\t} finally {\n\t\tdelete Object.prototype.__global__;\n\t}\n})();\n","export interface Options {\n    allClearResetTime?: number;\n    connectTimeout?: number;\n    debug?: boolean;\n    minReconnectDelay?: number;\n    maxReconnectDelay?: number;\n    maxReconnectAttempts?: number;\n    reconnectBackoffFactor?: number;\n    wsConstructor?: new (url: string, protocols?: string | string[]) => any;\n    shouldReconnect?(closeEvent: CloseEvent): boolean | Promise<boolean>;\n}\n\ninterface SturdyWebSocketEventMap extends WebSocketEventMap {\n    down: CloseEvent;\n    reopen: Event;\n}\n\ntype WebSocketListener<K extends keyof SturdyWebSocketEventMap> = (\n    this: WebSocket,\n    event: SturdyWebSocketEventMap[K],\n) => any;\n\ntype WebSocketListeners = {\n    [K in keyof SturdyWebSocketEventMap]?: Array<WebSocketListener<K>>;\n} & {\n    [key: string]: EventListenerOrEventListenerObject[];\n};\n\nconst SHOULD_RECONNECT_FALSE_MESSAGE =\n    \"Provided shouldReconnect() returned false. Closing permanently.\";\nconst SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE =\n    \"Provided shouldReconnect() resolved to false. Closing permanently.\";\n\nexport default class SturdyWebSocket implements WebSocket {\n    public static readonly DEFAULT_OPTIONS: Required<Options> = {\n        allClearResetTime: 5000,\n        connectTimeout: 5000,\n        debug: false,\n        minReconnectDelay: 1000,\n        maxReconnectDelay: 30000,\n        maxReconnectAttempts: Number.POSITIVE_INFINITY,\n        reconnectBackoffFactor: 1.5,\n        shouldReconnect: () => true,\n        wsConstructor: undefined!,\n    };\n\n    public static readonly CONNECTING = 0;\n    public static readonly OPEN = 1;\n    public static readonly CLOSING = 2;\n    public static readonly CLOSED = 3;\n\n    public onclose: ((event: CloseEvent) => void) | null = null;\n    public onerror: ((event: Event) => void) | null = null;\n    public onmessage: ((event: MessageEvent) => void) | null = null;\n    public onopen: ((event: Event) => void) | null = null;\n    public ondown: ((event: CloseEvent | undefined) => void) | null = null;\n    public onreopen: ((event: Event) => void) | null = null;\n    public readonly CONNECTING = SturdyWebSocket.CONNECTING;\n    public readonly OPEN = SturdyWebSocket.OPEN;\n    public readonly CLOSING = SturdyWebSocket.CLOSING;\n    public readonly CLOSED = SturdyWebSocket.CLOSED;\n\n    private readonly protocols?: string | string[];\n    private readonly options: Required<Options>;\n    private ws?: WebSocket;\n    private hasBeenOpened = false;\n    private isClosed = false;\n    private messageBuffer: any[] = [];\n    private nextRetryTime: number = 0;\n    private reconnectCount = 0;\n    private allClearTimeoutId?: any;\n    private connectTimeoutId?: any;\n    private binaryTypeInternal?: BinaryType;\n    private lastKnownExtensions = \"\";\n    private lastKnownProtocol = \"\";\n    private readonly listeners: WebSocketListeners = {};\n\n    constructor(url: string, options?: Options);\n    constructor(\n        url: string,\n        protocols: string | string[] | undefined,\n        options?: Options,\n    );\n    constructor(\n        public readonly url: string,\n        protocolsOrOptions?: string | string[] | Options,\n        options: Options = {},\n    ) {\n        if (\n            protocolsOrOptions == null ||\n            typeof protocolsOrOptions === \"string\" ||\n            Array.isArray(protocolsOrOptions)\n        ) {\n            this.protocols = protocolsOrOptions;\n        } else {\n            options = protocolsOrOptions;\n        }\n        this.options = applyDefaultOptions(options);\n        if (!this.options.wsConstructor) {\n            if (typeof WebSocket !== \"undefined\") {\n                this.options.wsConstructor = WebSocket;\n            } else {\n                throw new Error(\n                    \"WebSocket not present in global scope and no \" +\n                        \"wsConstructor option was provided.\",\n                );\n            }\n        }\n        this.openNewWebSocket();\n    }\n\n    public get binaryType(): BinaryType {\n        return this.binaryTypeInternal || \"blob\";\n    }\n\n    public set binaryType(binaryType: BinaryType) {\n        this.binaryTypeInternal = binaryType;\n        if (this.ws) {\n            this.ws.binaryType = binaryType;\n        }\n    }\n\n    public get bufferedAmount(): number {\n        let sum = this.ws ? this.ws.bufferedAmount : 0;\n        let hasUnknownAmount = false;\n        this.messageBuffer.forEach(data => {\n            const byteLength = getDataByteLength(data);\n            if (byteLength != null) {\n                sum += byteLength;\n            } else {\n                hasUnknownAmount = true;\n            }\n        });\n        if (hasUnknownAmount) {\n            this.debugLog(\n                \"Some buffered data had unknown length. bufferedAmount()\" +\n                    \" return value may be below the correct amount.\",\n            );\n        }\n        return sum;\n    }\n\n    public get extensions(): string {\n        return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n    }\n\n    public get protocol(): string {\n        return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n    }\n\n    public get readyState(): number {\n        return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n    }\n\n    public close(code?: number, reason?: string): void {\n        this.disposeSocket(code, reason);\n        this.shutdown();\n        this.debugLog(\"WebSocket permanently closed by client.\");\n    }\n\n    public send(data: any): void {\n        if (this.isClosed) {\n            throw new Error(\"WebSocket is already in CLOSING or CLOSED state.\");\n        } else if (this.ws && this.ws.readyState === this.OPEN) {\n            this.ws.send(data);\n        } else {\n            this.messageBuffer.push(data);\n        }\n    }\n\n    public reconnect(): void {\n        if (this.isClosed) {\n            throw new Error(\n                \"Cannot call reconnect() on socket which is permanently closed.\",\n            );\n        }\n        this.disposeSocket(1000, \"Client requested reconnect.\");\n        this.handleClose(undefined);\n    }\n\n    public addEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n    }\n\n    public dispatchEvent(event: Event): boolean {\n        return this.dispatchEventOfType(event.type, event);\n    }\n\n    public removeEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (this.listeners[type]) {\n            this.listeners[type] = this.listeners[type].filter(\n                l => l !== listener,\n            );\n        }\n    }\n\n    private openNewWebSocket(): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { connectTimeout, wsConstructor } = this.options;\n        this.debugLog(`Opening new WebSocket to ${this.url}.`);\n        const ws: WebSocket = new wsConstructor(this.url, this.protocols);\n        ws.onclose = event => this.handleClose(event);\n        ws.onerror = event => this.handleError(event);\n        ws.onmessage = event => this.handleMessage(event);\n        ws.onopen = event => this.handleOpen(event);\n        this.connectTimeoutId = setTimeout(() => {\n            // If this is running, we still haven't opened the websocket.\n            // Kill it so we can try again.\n            this.clearConnectTimeout();\n            this.disposeSocket();\n            this.handleClose(undefined);\n        }, connectTimeout);\n        this.ws = ws;\n    }\n\n    private handleOpen(event: Event): void {\n        if (!this.ws || this.isClosed) {\n            return;\n        }\n        const { allClearResetTime } = this.options;\n        this.debugLog(\"WebSocket opened.\");\n        if (this.binaryTypeInternal != null) {\n            this.ws.binaryType = this.binaryTypeInternal;\n        } else {\n            this.binaryTypeInternal = this.ws.binaryType;\n        }\n        this.clearConnectTimeout();\n        if (this.hasBeenOpened) {\n            this.dispatchEventOfType(\"reopen\", event);\n        } else {\n            this.dispatchEventOfType(\"open\", event);\n            this.hasBeenOpened = true;\n        }\n        this.messageBuffer.forEach(message => this.send(message));\n        this.messageBuffer = [];\n        this.allClearTimeoutId = setTimeout(() => {\n            this.clearAllClearTimeout();\n            this.nextRetryTime = 0;\n            this.reconnectCount = 0;\n            const openTime = (allClearResetTime / 1000) | 0;\n            this.debugLog(\n                `WebSocket remained open for ${openTime} seconds. Resetting` +\n                    \" retry time and count.\",\n            );\n        }, allClearResetTime);\n    }\n\n    private handleMessage(event: MessageEvent): void {\n        if (this.isClosed) {\n            return;\n        }\n        this.dispatchEventOfType(\"message\", event);\n    }\n\n    private handleClose(event: CloseEvent | undefined): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { maxReconnectAttempts, shouldReconnect } = this.options;\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n        if (this.ws) {\n            this.lastKnownExtensions = this.ws.extensions;\n            this.lastKnownProtocol = this.ws.protocol;\n            this.disposeSocket();\n        }\n        this.dispatchEventOfType(\"down\", event);\n        if (this.reconnectCount >= maxReconnectAttempts) {\n            this.stopReconnecting(\n                event,\n                this.getTooManyFailedReconnectsMessage(),\n            );\n            return;\n        }\n        const willReconnect = !event || shouldReconnect(event);\n        if (typeof willReconnect === \"boolean\") {\n            this.handleWillReconnect(\n                willReconnect,\n                event,\n                SHOULD_RECONNECT_FALSE_MESSAGE,\n            );\n        } else {\n            willReconnect.then(willReconnectResolved => {\n                if (this.isClosed) {\n                    return;\n                }\n                this.handleWillReconnect(\n                    willReconnectResolved,\n                    event,\n                    SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE,\n                );\n            });\n        }\n    }\n\n    private handleError(event: Event): void {\n        this.dispatchEventOfType(\"error\", event);\n        this.debugLog(\"WebSocket encountered an error.\");\n    }\n\n    private handleWillReconnect(\n        willReconnect: boolean,\n        event: CloseEvent | undefined,\n        denialReason: string,\n    ): void {\n        if (willReconnect) {\n            this.reestablishConnection();\n        } else {\n            this.stopReconnecting(event, denialReason);\n        }\n    }\n\n    private reestablishConnection(): void {\n        const {\n            minReconnectDelay,\n            maxReconnectDelay,\n            reconnectBackoffFactor,\n        } = this.options;\n        this.reconnectCount++;\n        const retryTime = this.nextRetryTime;\n        this.nextRetryTime = Math.max(\n            minReconnectDelay,\n            Math.min(\n                this.nextRetryTime * reconnectBackoffFactor,\n                maxReconnectDelay,\n            ),\n        );\n        setTimeout(() => this.openNewWebSocket(), retryTime);\n        const retryTimeSeconds = (retryTime / 1000) | 0;\n        this.debugLog(\n            `WebSocket was closed. Re-opening in ${retryTimeSeconds} seconds.`,\n        );\n    }\n\n    private stopReconnecting(\n        event: CloseEvent | undefined,\n        debugReason: string,\n    ): void {\n        this.debugLog(debugReason);\n        this.shutdown();\n        if (event) {\n            this.dispatchEventOfType(\"close\", event);\n        }\n    }\n\n    private shutdown(): void {\n        this.isClosed = true;\n        this.clearAllTimeouts();\n        this.messageBuffer = [];\n        this.disposeSocket();\n    }\n\n    private disposeSocket(closeCode?: number, reason?: string): void {\n        if (!this.ws) {\n            return;\n        }\n        // Use noop handlers instead of null because some WebSocket\n        // implementations, such as the one from isomorphic-ws, raise a stink on\n        // unhandled events.\n        this.ws.onerror = noop;\n        this.ws.onclose = noop;\n        this.ws.onmessage = noop;\n        this.ws.onopen = noop;\n        this.ws.close(closeCode, reason);\n        this.ws = undefined;\n    }\n\n    private clearAllTimeouts(): void {\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n    }\n\n    private clearConnectTimeout(): void {\n        if (this.connectTimeoutId != null) {\n            clearTimeout(this.connectTimeoutId);\n            this.connectTimeoutId = undefined;\n        }\n    }\n\n    private clearAllClearTimeout(): void {\n        if (this.allClearTimeoutId != null) {\n            clearTimeout(this.allClearTimeoutId);\n            this.allClearTimeoutId = undefined;\n        }\n    }\n\n    private dispatchEventOfType(type: string, event: any): boolean {\n        switch (type) {\n            case \"close\":\n                if (this.onclose) {\n                    this.onclose(event);\n                }\n                break;\n            case \"error\":\n                if (this.onerror) {\n                    this.onerror(event);\n                }\n                break;\n            case \"message\":\n                if (this.onmessage) {\n                    this.onmessage(event);\n                }\n                break;\n            case \"open\":\n                if (this.onopen) {\n                    this.onopen(event);\n                }\n                break;\n            case \"down\":\n                if (this.ondown) {\n                    this.ondown(event);\n                }\n                break;\n            case \"reopen\":\n                if (this.onreopen) {\n                    this.onreopen(event);\n                }\n                break;\n        }\n        if (type in this.listeners) {\n            this.listeners[type]\n                .slice()\n                .forEach(listener => this.callListener(listener, event));\n        }\n        return !event || !(event as Event).defaultPrevented;\n    }\n\n    private callListener(\n        listener: EventListenerOrEventListenerObject,\n        event: Event,\n    ): void {\n        if (typeof listener === \"function\") {\n            listener.call(this, event);\n        } else {\n            listener.handleEvent.call(this, event);\n        }\n    }\n\n    private debugLog(message: string): void {\n        if (this.options.debug) {\n            // tslint:disable-next-line:no-console\n            console.log(message);\n        }\n    }\n\n    private getTooManyFailedReconnectsMessage(): string {\n        const { maxReconnectAttempts } = this.options;\n        return `Failed to reconnect after ${maxReconnectAttempts} ${pluralize(\n            \"attempt\",\n            maxReconnectAttempts,\n        )}. Closing permanently.`;\n    }\n}\n\nfunction applyDefaultOptions(options: Options): Required<Options> {\n    const result: any = {};\n    Object.keys(SturdyWebSocket.DEFAULT_OPTIONS).forEach(key => {\n        const value = (options as any)[key];\n        result[key] =\n            value === undefined\n                ? (SturdyWebSocket.DEFAULT_OPTIONS as any)[key]\n                : value;\n    });\n    return result;\n}\n\nfunction getDataByteLength(data: any): number | undefined {\n    if (typeof data === \"string\") {\n        // UTF-16 strings use two bytes per character.\n        return 2 * data.length;\n    } else if (data instanceof ArrayBuffer) {\n        return data.byteLength;\n    } else if (data instanceof Blob) {\n        return data.size;\n    } else {\n        return undefined;\n    }\n}\n\nfunction pluralize(s: string, n: number): string {\n    return n === 1 ? s : `${s}s`;\n}\n\nfunction noop(): void {\n    // Nothing.\n}\n","var _globalThis;\nif (typeof globalThis === 'object') {\n\t_globalThis = globalThis;\n} else {\n\ttry {\n\t\t_globalThis = require('es5-ext/global');\n\t} catch (error) {\n\t} finally {\n\t\tif (!_globalThis && typeof window !== 'undefined') { _globalThis = window; }\n\t\tif (!_globalThis) { throw new Error('Could not determine global this'); }\n\t}\n}\n\nvar NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;\nvar websocket_version = require('./version');\n\n\n/**\n * Expose a W3C WebSocket class with just one or two arguments.\n */\nfunction W3CWebSocket(uri, protocols) {\n\tvar native_instance;\n\n\tif (protocols) {\n\t\tnative_instance = new NativeWebSocket(uri, protocols);\n\t}\n\telse {\n\t\tnative_instance = new NativeWebSocket(uri);\n\t}\n\n\t/**\n\t * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket\n\t * class). Since it is an Object it will be returned as it is when creating an\n\t * instance of W3CWebSocket via 'new W3CWebSocket()'.\n\t *\n\t * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2\n\t */\n\treturn native_instance;\n}\nif (NativeWebSocket) {\n\t['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {\n\t\tObject.defineProperty(W3CWebSocket, prop, {\n\t\t\tget: function() { return NativeWebSocket[prop]; }\n\t\t});\n\t});\n}\n\n/**\n * Module exports.\n */\nmodule.exports = {\n    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,\n    'version'      : websocket_version\n};\n","module.exports = require('../package.json').version;\n"],"names":["WS","WebSocket","Error","error","logger","Logger","version","throwError","errors","UNSUPPORTED_OPERATION","operation","NextId","WebSocketProvider","_JsonRpcProvider","_inherits","_super","_createSuper","url","network","_thisSuper","_this","_classCallCheck","call","_pollingInterval","_wsReady","defineReadOnly","_assertThisInitialized","connection","_get","_getPrototypeOf","prototype","websocket","onopen","Object","keys","_requests","forEach","id","send","payload","onmessage","messageEvent","data","result","JSON","parse","String","request","undefined","callback","emit","action","response","provider","message","code","method","sub","_subs","params","subscription","processFunc","console","warn","fauxPoll","setInterval","unref","_possibleConstructorReturn","_createClass","key","get","this","_websocket","value","_detectNetwork","set","blockNumber","_context","stop","_callee","_this2","rid","Promise","resolve","reject","stringify","jsonrpc","tag","param","subIdPromise","_subIds","all","then","_this3","_context2","next","subId","sent","_callee2","event","_this4","type","_subscribe","BigNumber","from","number","toNumber","_emitted","block","_getFilter","filter","removed","formatter","filterLog","emitReceipt","hash","getTransactionReceipt","receipt","_events","e","log","_this5","length","listenerCount","readyState","CONNECTING","_context3","_this6","onerror","close","_callee3","JsonRpcProvider","WebsocketBackfiller","maxBackfillBlocks","isCancelled","previousHeads","fromBlockNumber","throwIfCancelled","getBlockNumber","toBlockNumber","abrupt","getHeadEventsInRange","Math","max","lastSeenBlockNumber","fromHex","minBlockNumber","getReorgHeads","reorgHeads","intermediateHeads","concat","_toConsumableArray","previousLogs","getLogsInRange","getCommonAncestor","commonAncestor","removedLogs","map","assign","fromBlockInclusive","Number","NEGATIVE_INFINITY","addedLogs","logIndex","newMax","blockNumberHex","toBlockExclusive","_context4","batchParts","i","push","toHex","sendBatch","blockHeads","toNewHeadsEvent","_callee4","_context5","oldEvent","getBlockByNumber","blockHead","reverse","_callee5","_context6","_callee6","_context7","oldLog","blockHash","_callee7","_context8","rangeFilter","fromBlock","toBlock","_callee8","head","totalDifficulty","transactions","uncles","dedupeNewHeads","events","dedupe","dedupeLogs","items","getKey","keysSeen","Set","item","has","add","CANCELLED","RETAINED_EVENT_BLOCK_COUNT","AlchemyWebSocketProvider","_WebSocketProvider","config","wsConstructor","apiKey","AlchemyProvider","getApiKey","alchemyNetwork","getAlchemyNetwork","getAlchemyConnectionInfo","protocol","VERSION","ws","SturdyWebSocket","_a","process","versions","node","require","ethersNetwork","EthersNetwork","virtualSubscriptionsById","Map","virtualIdsByPhysicalId","handleMessage","Array","isArray","isResponse","isSubscriptionEvent","physicalId","virtualId","newHeadsSubscription","newHeadsMessage","isBackfilling","backfillBuffer","pastEvents","addToPastEventsBuffer","getNewHeadsBlockNumber","addToNewHeadsEventsBuffer","emitAndRememberEvent","rememberEvent","logsSubscription","logsMessage","getLogsBlockNumber","addToLogsEventsBuffer","emitEvent","handleReopen","clear","_makeCancelToken","cancelled","cancel","makeCancelToken","cancelBackfill","_step","_iterator","_createForOfIteratorHelper","values","_loop","__awaiter","_regeneratorRuntime","mark","_callee9","wrap","_context9","prev","resubscribeAndBackfill","t0","s","n","done","err","f","startHeartbeat","stopHeartbeatAndBackfill","heartbeatIntervalId","clearInterval","backfiller","addSocketListeners","noop","eventName","listener","_addEventListener","isAlchemyEvent","_off","_removeAllListeners","_listenerCount","_listeners","once","verifyAlchemyEventName","EthersEvent","getAlchemyEventTag","_startEvent","ALCHEMY_EVENT_TYPES","includes","customStartEvent","startingBlockNumber","_context10","resolvedParams","sentEvents","_callee10","_get2","_len","arguments","args","_key","stopped","eventTag","setTimeout","apply","_stopEvent","parts","nextId","_ref","_context11","sendBatchConcurrently","_callee11","removeSocketListeners","DEFAULT_ALCHEMY_API_KEY","addEventListener","removeEventListener","_context12","withBackoffRetries","withTimeout","getNewHeadsBackfill","backfillEvents","emitNewHeadsEvent","getLogsBackfill","emitLogsEvent","finish","_callee12","emitGenericEvent","emitProcessFn","emitFunction","_callee13","_context13","reconnect","req","_this7","_context14","_callee14","ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE","fromAddress","toAddress","hashesOnly","AlchemySubscription","PENDING_TRANSACTIONS","ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE","addresses","includeRemoved","MINED_TRANSACTIONS","_this8","_this9","removeAllListeners","found","_this10","CustomNetworks","getNetwork","MIN_RETRY_DELAY","RETRY_BACKOFF_FACTOR","MAX_RETRY_DELAY","retryCount","shouldRetry","nextWaitTime","_context15","delay","min","_callee15","ms","promise","race","_","currentBlockNumber","firstGoodIndex","findIndex","splice","naiveFallback","self","window","module","exports","globalThis","defineProperty","configurable","__global__","protocolsOrOptions","options","onclose","ondown","onreopen","OPEN","CLOSING","CLOSED","hasBeenOpened","isClosed","messageBuffer","nextRetryTime","reconnectCount","lastKnownExtensions","lastKnownProtocol","listeners","protocols","applyDefaultOptions","openNewWebSocket","binaryTypeInternal","binaryType","sum","bufferedAmount","hasUnknownAmount","byteLength","ArrayBuffer","Blob","size","getDataByteLength","debugLog","extensions","reason","disposeSocket","shutdown","handleClose","dispatchEvent","dispatchEventOfType","l","connectTimeout","handleError","handleOpen","connectTimeoutId","clearConnectTimeout","allClearResetTime","allClearTimeoutId","clearAllClearTimeout","openTime","maxReconnectAttempts","shouldReconnect","stopReconnecting","getTooManyFailedReconnectsMessage","willReconnect","handleWillReconnect","willReconnectResolved","denialReason","reestablishConnection","minReconnectDelay","maxReconnectDelay","reconnectBackoffFactor","retryTime","retryTimeSeconds","debugReason","clearAllTimeouts","closeCode","clearTimeout","slice","callListener","defaultPrevented","handleEvent","debug","DEFAULT_OPTIONS","POSITIVE_INFINITY","_globalThis","NativeWebSocket","MozWebSocket","websocket_version","W3CWebSocket","uri","prop"],"sourceRoot":""}